// import React, { useState } from 'react';
// import { Link } from 'react-router-dom';
// import { loadStripe } from '@stripe/stripe-js';
// import { Elements, useStripe, useElements, CardElement } from '@stripe/react-stripe-js';
// import axios from 'axios';

// const stripePromise = loadStripe('pk_test_51PxoUl2Katb405IjRgSHqoW7fATTF3ud6jXZ7B2nk1r8lvINvwHjDnKEtHl8ugrSu4G0dOK4dRxg1G2pILdvktPU00RfSlc4sU'); // Replace with your Stripe publishable key

// interface Course {
//     _id: string;
//     title: string;
//     description: string;
//     thumbnail?: string;
//     instructor: {
//         _id: string;
//         name: string;
//     };
//     rating: number[];
//     price: string;
//     category: string;
// }

// interface PopularCoursesProps {
//     courses: Course[];
// }

// const PopularCourses: React.FC<PopularCoursesProps> = ({ courses }) => {
//     const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);

//     const openPaymentModal = (course: Course) => {
//         setSelectedCourse(course);
//     };

//     const closePaymentModal = () => {
//         setSelectedCourse(null);
//     };

//     return (
//         <Elements stripe={stripePromise}>
//             <div className="grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
//                 {courses.map((course) => (
//                     <div
//                         key={course._id}
//                         className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden transform transition-all duration-300 hover:scale-105 hover:shadow-2xl"
//                     >
//                         <Link to={`/description/course/${course._id}`}>
//                             <img
//                                 src={course.thumbnail}
//                                 alt={course.title}
//                                 className="w-full h-48 object-cover hover:opacity-90 transition duration-200"
//                             />
//                         </Link>
//                         <div className="p-6">
//                             <h3 className="text-lg font-semibold text-gray-800 dark:text-white mb-2">
//                                 {course.title}
//                             </h3>
//                             <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
//                                 Instructor: {course.instructor.name}
//                             </p>
//                             <div className="flex justify-between items-center">
//                                 <span className="text-lg font-semibold text-green-600 dark:text-green-400">
//                                     {course.price === '0' ? 'Free' : `₹${course.price}`}
//                                 </span>
//                             </div>
//                             <div className="mt-4 flex items-center justify-between">
//                                 {course.price === '0' ? (
//                                     <Link to={`/course/${course._id}/enroll`} className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition">
//                                         Enroll Now
//                                     </Link>
//                                 ) : (
//                                     <button
//                                         onClick={() => openPaymentModal(course)}
//                                         className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition"
//                                     >
//                                         Buy Now
//                                     </button>
//                                 )}
//                             </div>
//                         </div>
//                     </div>
//                 ))}
//             </div>

//             {selectedCourse && (
//                 <PaymentModal course={selectedCourse} onClose={closePaymentModal} />
//             )}
//         </Elements>
//     );
// };

// interface PaymentModalProps {
//     course: Course;
//     onClose: () => void;
// }

// const PaymentModal: React.FC<PaymentModalProps> = ({ course, onClose }) => {
//     const stripe = useStripe();
//     const elements = useElements();
//     const [loading, setLoading] = useState(false);

//     const handlePayment = async (event: React.FormEvent) => {
//         event.preventDefault();
//         if (!stripe || !elements) return;

//         setLoading(true);

//         try {
//             // Make the API call to create a payment intent and get the client secret
//             const { data } = await axios.post('http://localhost:4000/payment/api/create-payment-intent', {
//                 amount: Number(course.price) * 100, // Convert amount to number before multiplying
//                 courseId: course._id,
//             });

//             const clientSecret = data.clientSecret;

//             // Confirm the card payment using the client_secret directly
//             const result = await stripe.confirmCardPayment(clientSecret, {
//                 payment_method: {
//                     card: elements.getElement(CardElement)!,
//                 },
//             });

//             if (result.error) {
//                 console.error(result.error.message);
//             } else if (result.paymentIntent?.status === 'succeeded') {
//                 console.log('Payment succeeded!');
//             }
//         } catch (error) {
//             console.error('Payment error:', error);
//         } finally {
//             setLoading(false);
//             onClose();
//         }
//     };

//     return (
//         <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center">
//             <div className="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg">
//                 <h2 className="text-lg font-bold mb-4">{course.title}</h2>
//                 <p className="mb-4">Price: ₹{course.price}</p>

//                 <form onSubmit={handlePayment}>
//                     <CardElement className="mb-4 p-2 border border-gray-300 rounded-lg" />
//                     <button
//                         className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition w-full"
//                         type="submit"
//                         disabled={!stripe || loading}
//                     >
//                         {loading ? 'Processing...' : 'Pay Now'}
//                     </button>
//                 </form>

//                 <button
//                     className="mt-4 bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition"
//                     onClick={onClose}
//                 >
//                     Cancel
//                 </button>
//             </div>
//         </div>
//     );
// };

// export default PopularCourses;
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { loadStripe } from '@stripe/stripe-js';
import { Elements, useStripe, useElements, CardElement } from '@stripe/react-stripe-js';
import axios from 'axios';

const stripePromise = loadStripe('pk_test_51PxoUl2Katb405IjRgSHqoW7fATTF3ud6jXZ7B2nk1r8lvINvwHjDnKEtHl8ugrSu4G0dOK4dRxg1G2pILdvktPU00RfSlc4sU'); // Replace with your Stripe publishable key

interface Course {
    _id: string;
    title: string;
    description: string;
    thumbnail?: string;
    instructor: {
        _id: string;
        name: string;
    };
    rating: number[];
    price: string;
    category: string;
}

interface PopularCoursesProps {
    courses: Course[];
}

const PopularCourses: React.FC<PopularCoursesProps> = ({ courses }) => {
    const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);

    const openPaymentModal = (course: Course) => {
        setSelectedCourse(course);
    };

    const closePaymentModal = () => {
        setSelectedCourse(null);
    };

    return (
        <Elements stripe={stripePromise}>
            <div className="grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                {courses.map((course) => (
                    <div
                        key={course._id}
                        className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden transform transition-all duration-300 hover:scale-105 hover:shadow-2xl"
                    >
                        <Link to={`/description/course/${course._id}`}>
                            <img
                                src={course.thumbnail}
                                alt={course.title}
                                className="w-full h-48 object-cover hover:opacity-90 transition duration-200"
                            />
                        </Link>
                        <div className="p-6">
                            <h3 className="text-lg font-semibold text-gray-800 dark:text-white mb-2">
                                {course.title}
                            </h3>
                            <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                                Instructor: {course.instructor.name}
                            </p>
                            <div className="flex justify-between items-center">
                                <span className="text-lg font-semibold text-green-600 dark:text-green-400">
                                    {course.price === '0' ? 'Free' : `₹${course.price}`}
                                </span>
                            </div>
                            <div className="mt-4 flex items-center justify-between">
                                {course.price === '0' ? (
                                    <Link to={`/course/${course._id}/enroll`} className="bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600 transition-all duration-300">
                                        Enroll Now
                                    </Link>
                                ) : (
                                    <button
                                        onClick={() => openPaymentModal(course)}
                                        className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-all duration-300"
                                    >
                                        Buy Now
                                    </button>
                                )}
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            {selectedCourse && (
                <PaymentModal course={selectedCourse} onClose={closePaymentModal} />
            )}
        </Elements>
    );
};

interface PaymentModalProps {
    course: Course;
    onClose: () => void;
}

const PaymentModal: React.FC<PaymentModalProps> = ({ course, onClose }) => {
    const navigate = useNavigate();
    const stripe = useStripe();
    const elements = useElements();
    const [loading, setLoading] = useState(false);

    const handlePayment = async (event: React.FormEvent) => {
        event.preventDefault();
        if (!stripe || !elements) return;

        setLoading(true);

        try {
            const authToken = localStorage.getItem("authToken");
            if (!authToken) {
                return navigate("/login")
            }
            const { data } = await axios.post('http://localhost:4000/payment/api/create-payment-intent', {
                amount: Number(course.price) * 100,
                courseId: course._id,
            }, {
                headers: {
                    Authorization: `bearer ${authToken}`
                }
            });

            const clientSecret = data.clientSecret;

            const result = await stripe.confirmCardPayment(clientSecret, {
                payment_method: {
                    card: elements.getElement(CardElement)!,
                },
            });

            if (result.error) {
                console.error(result.error.message);
            } else if (result.paymentIntent?.status === 'succeeded') {
                console.log('Payment succeeded!');
            }
        } catch (error) {
            console.error('Payment error:', error);
        } finally {
            setLoading(false);
            onClose();
        }
    };

    return (
        <div className="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white dark:bg-gray-900 p-6 rounded-lg shadow-lg w-full max-w-md">
                <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-white text-center">{course.title}</h2>
                <p className="text-gray-700 dark:text-gray-300 mb-6 text-center">Price: ₹{course.price}</p>

                <form onSubmit={handlePayment} className="space-y-6">
                    <div className="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg border border-gray-300 dark:border-gray-600 transition-all duration-300 focus-within:ring-2 focus-within:ring-blue-400">
                        <CardElement
                            className="p-2"
                            options={{
                                style: {
                                    base: {
                                        fontSize: '16px',
                                        color: '#424770',
                                        '::placeholder': {
                                            color: '#aab7c4',
                                        },
                                    },
                                    invalid: {
                                        color: '#9e2146',
                                    },
                                },
                            }}
                        />
                    </div>

                    <button
                        className={`w-full bg-blue-500 hover:bg-blue-600 text-white py-3 rounded-lg transition-all duration-300 ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
                        type="submit"
                        disabled={!stripe || loading}
                    >
                        {loading ? 'Processing...' : 'Pay Now'}
                    </button>
                </form>

                <button
                    className="mt-4 w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-lg transition-all duration-300"
                    onClick={onClose}
                >
                    Cancel
                </button>
            </div>
        </div>
    );
};

export default PopularCourses;
// import React, { useState } from 'react';
// import { Link, useNavigate } from 'react-router-dom';
// import { loadStripe } from '@stripe/stripe-js';
// import { Elements, useStripe, useElements, CardElement } from '@stripe/react-stripe-js';
// import axios from 'axios';

// const stripePromise = loadStripe('pk_test_51PxoUl2Katb405IjRgSHqoW7fATTF3ud6jXZ7B2nk1r8lvINvwHjDnKEtHl8ugrSu4G0dOK4dRxg1G2pILdvktPU00RfSlc4sU'); // Replace with your Stripe publishable key

// interface Course {
//     _id: string;
//     title: string;
//     description: string;
//     thumbnail?: string;
//     instructor: {
//         _id: string;
//         name: string;
//     };
//     rating: number[];
//     price: string;
//     category: string;
// }

// interface PopularCoursesProps {
//     courses: Course[];
// }

// const PopularCourses: React.FC<PopularCoursesProps> = ({ courses }) => {
//     const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);

//     const openPaymentModal = (course: Course) => {
//         setSelectedCourse(course);
//     };

//     const closePaymentModal = () => {
//         setSelectedCourse(null);
//     };

//     return (
//         <Elements stripe={stripePromise}>
//             <div className="grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
//                 {courses.map((course) => (
//                     <div
//                         key={course._id}
//                         className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden transform transition-all duration-300 hover:scale-105 hover:shadow-2xl"
//                     >
//                         <Link to={`/description/course/${course._id}`}>
//                             <img
//                                 src={course.thumbnail}
//                                 alt={course.title}
//                                 className="w-full h-48 object-cover hover:opacity-90 transition duration-200"
//                             />
//                         </Link>
//                         <div className="p-6">
//                             <h3 className="text-lg font-semibold text-gray-800 dark:text-white mb-2">
//                                 {course.title}
//                             </h3>
//                             <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
//                                 Instructor: {course.instructor.name}
//                             </p>
//                             <div className="flex justify-between items-center">
//                                 <span className="text-lg font-semibold text-green-600 dark:text-green-400">
//                                     {course.price === '0' ? 'Free' : `₹${course.price}`}
//                                 </span>
//                             </div>
//                             <div className="mt-4 flex items-center justify-between">
//                                 {course.price === '0' ? (
//                                     <Link to={`/course/${course._id}/enroll`} className="bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600 transition-all duration-300">
//                                         Enroll Now
//                                     </Link>
//                                 ) : (
//                                     <button
//                                         onClick={() => openPaymentModal(course)}
//                                         className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-all duration-300"
//                                     >
//                                         Buy Now
//                                     </button>
//                                 )}
//                             </div>
//                         </div>
//                     </div>
//                 ))}
//             </div>

//             {selectedCourse && (
//                 <PaymentModal course={selectedCourse} onClose={closePaymentModal} />
//             )}
//         </Elements>
//     );
// };

// interface PaymentModalProps {
//     course: Course;
//     onClose: () => void;
// }

// const PaymentModal: React.FC<PaymentModalProps> = ({ course, onClose }) => {
//     const navigate = useNavigate();
//     const stripe = useStripe();
//     const elements = useElements();
//     const [loading, setLoading] = useState(false);

//     const handlePayment = async (event: React.FormEvent) => {
//         event.preventDefault();
//         if (!stripe || !elements) return;

//         setLoading(true);

//         try {
//             const authToken = localStorage.getItem("authToken");
//             if (!authToken) {
//                 return navigate("/login")
//             }
//             const { data } = await axios.post('http://localhost:4000/payment/api/create-payment-intent', {
//                 amount: Number(course.price) * 100,
//                 courseId: course._id,
//             }, {
//                 headers: {
//                     Authorization: `bearer ${authToken}`
//                 }
//             });

//             const clientSecret = data.clientSecret;

//             const result = await stripe.confirmCardPayment(clientSecret, {
//                 payment_method: {
//                     card: elements.getElement(CardElement)!,
//                 },
//             });

//             if (result.error) {
//                 console.error(result.error.message);
//             } else if (result.paymentIntent?.status === 'succeeded') {
//                 console.log('Payment succeeded!');
//             }
//         } catch (error) {
//             console.error('Payment error:', error);
//         } finally {
//             setLoading(false);
//             onClose();
//         }
//     };

//     return (
//         <div className="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50">
//             <div className="bg-white dark:bg-gray-900 p-6 rounded-lg shadow-lg w-full max-w-md">
//                 <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-white text-center">{course.title}</h2>
//                 <p className="text-gray-700 dark:text-gray-300 mb-6 text-center">Price: ₹{course.price}</p>

//                 <form onSubmit={handlePayment} className="space-y-6">
//                     <div className="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg border border-gray-300 dark:border-gray-600 transition-all duration-300 focus-within:ring-2 focus-within:ring-blue-400">
//                         <CardElement
//                             className="p-2"
//                             options={{
//                                 style: {
//                                     base: {
//                                         fontSize: '16px',
//                                         color: '#424770',
//                                         '::placeholder': {
//                                             color: '#aab7c4',
//                                         },
//                                     },
//                                     invalid: {
//                                         color: '#9e2146',
//                                     },
//                                 },
//                             }}
//                         />
//                     </div>

//                     <button
//                         className={`w-full bg-blue-500 hover:bg-blue-600 text-white py-3 rounded-lg transition-all duration-300 ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
//                         type="submit"
//                         disabled={!stripe || loading}
//                     >
//                         {loading ? 'Processing...' : 'Pay Now'}
//                     </button>
//                 </form>

//                 <button
//                     className="mt-4 w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-lg transition-all duration-300"
//                     onClick={onClose}
//                 >
//                     Cancel
//                 </button>
//             </div>
//         </div>
//     );
// };

// export default PopularCourses;

import React, { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { loadStripe } from '@stripe/stripe-js';
import { Elements, useStripe, useElements, CardElement } from '@stripe/react-stripe-js';
import { useForm } from 'react-hook-form';
import axios from 'axios';
import { AppDispatch, RootState } from '../app/store/store';
import { useDispatch, useSelector } from 'react-redux';
import { fetchUserProfile } from '../app/store/features/user/userSlice';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css'; // Import the CSS for the toast notifications
import { deleteCourseApi } from '../services';

const stripePromise = loadStripe('pk_test_51PxoUl2Katb405IjRgSHqoW7fATTF3ud6jXZ7B2nk1r8lvINvwHjDnKEtHl8ugrSu4G0dOK4dRxg1G2pILdvktPU00RfSlc4sU'); // Replace with your Stripe publishable key

interface Course {
    _id: string;
    title: string;
    description: string;
    thumbnail?: string;
    instructor: {
        _id: string;
        name: string;
    };
    rating: number[];
    price: string;
    category: string;
}

interface PopularCoursesProps {
    courses: Course[];
}

const PopularCourses: React.FC<PopularCoursesProps> = ({ courses }) => {
    const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);

    // Get user state
    const [user, setUser] = useState<any>(null);
    const dispatch: AppDispatch = useDispatch();
    const userProfile = useSelector((state: RootState) => state.userProfileData);

    useEffect(() => setUser(userProfile), [userProfile]);

    useEffect(() => {
        dispatch(fetchUserProfile());
    }, [dispatch]);

    const openPaymentModal = (course: Course) => {
        setSelectedCourse(course);
    };

    const closePaymentModal = () => {
        setSelectedCourse(null);
    };

    const handleDeleteCourse = async (courseId: any) => {
        try {
            const response = await axios.delete(deleteCourseApi + `/${courseId}`, {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem("authToken")}`
                }
            })
            toast.success(response.data.msg)
            setTimeout(() => {
                window.location.reload();
            }, 999)
        } catch (error: any) {
            console.log(error);
            toast.error(error)
        }
    }

    return (
        <Elements stripe={stripePromise}>
            <ToastContainer />
            <div className="grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                {courses.map((course) => (
                    <div
                        key={course._id}
                        className="bg-white dark:bg-gray-900 rounded-lg shadow-lg hover:shadow-2xl transform transition-transform duration-300 hover:scale-105 overflow-hidden"
                    >
                        <Link to={`/description/course/${course._id}`}>
                            <img
                                src={course.thumbnail}
                                alt={course.title}
                                className="w-full h-48 object-cover transition-opacity duration-300 hover:opacity-90"
                            />
                        </Link>
                        <div className="p-6 space-y-3">
                            <h3 className="text-lg font-bold text-gray-900 dark:text-white">
                                {course.title}
                            </h3>
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                                Instructor: {course.instructor.name}
                            </p>
                            <div className="flex justify-between items-center">
                                <span className="text-lg font-semibold text-green-600 dark:text-green-400">
                                    {course.price === '0' ? 'Free' : `₹${course.price}`}
                                </span>
                            </div>
                            <div className="mt-4 flex items-center justify-between">
                                {course.price === '0' ? (
                                    <Link to={`/course/${course._id}/enroll`} className="bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600 transition duration-300">
                                        Enroll Now
                                    </Link>
                                ) : (
                                    <button
                                        onClick={() => openPaymentModal(course)}
                                        className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-all duration-300"
                                    >
                                        Buy Now
                                    </button>
                                )}
                            </div>

                            {user && user.role === 'instructor' && user._id === course.instructor._id && (
                                <div className="mt-4 flex justify-between space-x-2">
                                    <Link to={`/course/${course._id}/edit`} className="bg-yellow-500 text-white py-2 px-4 rounded-lg hover:bg-yellow-600 transition duration-300">
                                        Edit Course
                                    </Link>
                                    <Link to={`/course/${course._id}/add-quiz`} className="bg-purple-500 text-white py-2 px-4 rounded-lg hover:bg-purple-600 transition duration-300">
                                        Add Quiz
                                    </Link>
                                    <button onClick={() => handleDeleteCourse(course._id)} className="bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition duration-300">
                                        Delete
                                    </button>
                                    <Link to={`/course/${course._id}/schedule/google-meet`}>generate google meet code</Link>
                                </div>
                            )}
                        </div>
                    </div>
                ))}
            </div>

            {selectedCourse && (
                <PaymentModal course={selectedCourse} onClose={closePaymentModal} />
            )}
        </Elements>
    );
};

interface PaymentModalProps {
    course: Course;
    onClose: () => void;
}

const PaymentModal: React.FC<PaymentModalProps> = ({ course, onClose }) => {
    const navigate = useNavigate();
    const stripe = useStripe();
    const elements = useElements();
    const [loading, setLoading] = useState(false);
    const { handleSubmit } = useForm();

    const handlePayment = async () => {
        if (!stripe || !elements) return;

        setLoading(true);

        try {
            const authToken = localStorage.getItem("authToken");
            if (!authToken) {
                return navigate("/login");
            }
            const { data } = await axios.post('http://localhost:4000/payment/api/create-payment-intent', {
                amount: Number(course.price) * 100,
                courseId: course._id,
            }, {
                headers: {
                    Authorization: `Bearer ${authToken}`
                }
            });

            const clientSecret = data.clientSecret;

            const result = await stripe.confirmCardPayment(clientSecret, {
                payment_method: {
                    card: elements.getElement(CardElement)!,
                },
            });

            if (result.error) {
                console.error(result.error.message);
                toast.error(result.error.message)
            } else if (result.paymentIntent?.status === 'succeeded') {
                toast.success('Payment succeeded!');
                console.log('Payment succeeded!');
            }
        } catch (error) {
            console.error('Payment error:', error);
        } finally {
            setLoading(false);
            onClose();
        }
    };

    return (
        <div className="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 p-4">
            <div className="bg-white dark:bg-gray-900 p-6 rounded-lg shadow-lg w-full max-w-lg relative">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4 text-center">{course.title}</h2>
                <p className="text-gray-700 dark:text-gray-300 mb-6 text-center">Price: ₹{course.price}</p>

                <form onSubmit={handleSubmit(handlePayment)} className="space-y-6">
                    <div className="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg border border-gray-300 dark:border-gray-600">
                        <CardElement
                            className="p-2"
                            options={{
                                style: {
                                    base: {
                                        fontSize: '16px',
                                        color: '#424770',
                                        '::placeholder': {
                                            color: '#aab7c4',
                                        },
                                    },
                                    invalid: {
                                        color: '#9e2146',
                                    },
                                },
                            }}
                        />
                    </div>

                    <button
                        className={`w-full bg-blue-500 hover:bg-blue-600 text-white py-3 rounded-lg transition-all duration-300 ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
                        type="submit"
                        disabled={!stripe || loading}
                    >
                        {loading ? 'Processing...' : 'Pay Now'}
                    </button>
                </form>

                <button
                    className="mt-4 w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-lg transition duration-300"
                    onClick={onClose}
                >
                    Cancel
                </button>
            </div>
        </div>
    );
};

export default PopularCourses;
// import React, { useEffect, useState } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import { useDispatch, useSelector } from 'react-redux';
// import { AppDispatch, RootState } from '../app/store/store';
// import { fetchCourses } from '../app/store/features/coursesSlice';

// const DescOfCourse: React.FC = () => {
//     const { id } = useParams<{ id: string }>();
//     const dispatch: AppDispatch = useDispatch();
//     const navigate = useNavigate();
//     const { courses } = useSelector((state: RootState) => state.coursesData);
//     const [selectedCourseId, setSelectedCourseId] = useState(id); // State for selected course ID
//     const [userRating, setUserRating] = useState<number>(0); // User rating

//     useEffect(() => {
//         dispatch(fetchCourses());
//     }, [dispatch]);

//     useEffect(() => {
//         setSelectedCourseId(id);
//     }, [id]);

//     const currentCourse = courses.find(course => course._id === selectedCourseId);

//     // Calculate the average rating of the course
//     const averageRating = currentCourse?.rating 
//         ? currentCourse.rating.reduce((acc, val) => acc + val, 0) / currentCourse.rating.length 
//         : 0;

//     const relatedCourses = courses.filter(course => course.category === currentCourse?.category && course._id !== selectedCourseId);

//     // Handle user star rating click
//     const handleStarClick = (rating: number) => {
//         setUserRating(rating);
//     };

//     const handleCourseClick = (courseId: string) => {
//         setSelectedCourseId(courseId); // Update the selected course ID
//         navigate(`/description/course/${courseId}`); // Navigate to the selected course page
//     };

//     return (
//         <div className="p-6 max-w-4xl mx-auto">
//             {currentCourse ? (
//                 <div className="mb-12 bg-white shadow-xl rounded-lg overflow-hidden transform transition duration-500">
//                     {/* Course Thumbnail */}
//                     {currentCourse.thumbnail && (
//                         <img
//                             src={currentCourse.thumbnail}
//                             alt={currentCourse.title}
//                             className="w-full h-80 object-cover"
//                         />
//                     )}

//                     <div className="p-6">
//                         {/* Course Title */}
//                         <h1 className="text-4xl font-extrabold mb-4 text-gray-800">{currentCourse.title}</h1>

//                         {/* Instructor Name */}
//                         <p className="text-lg text-gray-500 mb-4">by {currentCourse.instructor.name}</p>

//                         {/* Average Rating */}
//                         <div className="flex items-center mb-4">
//                             <span className="text-yellow-500 text-lg mr-2">
//                                 {'★'.repeat(Math.round(averageRating))}
//                                 {'☆'.repeat(5 - Math.round(averageRating))}
//                             </span>
//                             <span className="text-gray-500">
//                                 ({currentCourse.rating?.length || 0} ratings)
//                             </span>
//                         </div>

//                         {/* User Rating */}
//                         <div className="flex items-center mb-6">
//                             <span className="mr-4 text-gray-600">Rate this course:</span>
//                             {[1, 2, 3, 4, 5].map(star => (
//                                 <button
//                                     key={star}
//                                     className={`text-2xl transition-colors duration-300 ${userRating >= star ? 'text-yellow-500' : 'text-gray-400 hover:text-yellow-500'}`}
//                                     onClick={() => handleStarClick(star)}
//                                 >
//                                     ★
//                                 </button>
//                             ))}
//                         </div>

//                         {/* Course Price */}
//                         <p className="text-3xl font-semibold text-green-600 mb-4">₹{currentCourse.price}</p>

//                         {/* Course Description */}
//                         <p className="text-lg leading-relaxed text-gray-700 mb-6">
//                             {currentCourse.description}
//                         </p>

//                         {/* Action Buttons */}
//                         <div className="flex space-x-4">
//                             <button 
//                                 className="bg-green-600 text-white py-3 px-6 rounded-lg shadow-lg hover:bg-green-500 transform transition duration-300 hover:scale-105"
//                             >
//                                 Buy Now
//                             </button>
//                         </div>
//                     </div>
//                 </div>
//             ) : (
//                 <p className="text-center text-gray-500">Loading course details...</p>
//             )}

//             {/* Related Courses Section */}
//             <h2 className="text-2xl font-bold mb-6 text-gray-800">Related Courses</h2>
//             <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
//                 {relatedCourses.map(course => (
//                     <div 
//                         key={course._id} 
//                         className="p-4 border border-gray-200 rounded-lg shadow-lg bg-white hover:shadow-2xl transform transition duration-500 hover:scale-105 cursor-pointer"
//                         onClick={() => handleCourseClick(course._id)}
//                     >
//                         {/* Thumbnail */}
//                         {course.thumbnail && (
//                             <img
//                                 src={course.thumbnail}
//                                 alt={course.title}
//                                 className="w-full h-40 object-cover rounded-md mb-4"
//                             />
//                         )}
//                         <h3 className="text-xl font-semibold mb-2 text-gray-800">{course.title}</h3>
//                         <p className="text-sm text-gray-500 mb-2">by {course.instructor.name}</p>
//                         <p className="text-sm text-gray-600 mb-4">{course.description}</p>
//                         <p className="text-lg font-bold text-green-600">₹{course.price}</p>
//                     </div>
//                 ))}
//             </div>
//         </div>
//     );
// };

// export default DescOfCourse;


// import React, { useState } from 'react';
// import { useForm } from 'react-hook-form';
// import axios from 'axios';
// import { sendOtpApi, signUpApi } from '../services';
// import { Link } from 'react-router-dom';
// import { ToastContainer, toast } from 'react-toastify';
// import 'react-toastify/dist/ReactToastify.css';
// import { useNavigate } from 'react-router-dom';

// interface FormValues {
//     name: string;
//     email: string;
//     password: string;
//     role: string;
//     otp: string;
// }

// const SignUp: React.FC = () => {
//     const navigate = useNavigate();
//     const { register, handleSubmit, formState: { errors }, reset } = useForm<FormValues>();
//     const [otpSent, setOtpSent] = useState(false);
//     const [serverOtp, setServerOtp] = useState<string | null>(null);
//     const [formData, setFormData] = useState<Omit<FormValues, 'otp'>>({
//         name: '',
//         email: '',
//         password: '',
//         role: 'student',
//     });
//     const [isSendOtpDisabled, setIsSendOtpDisabled] = useState(false);

//     const onSubmit = async (data: FormValues) => {
//         if (!otpSent) {
//             setIsSendOtpDisabled(true); // Disable the Send OTP button when clicked
//             try {
//                 setFormData({
//                     name: data.name,
//                     email: data.email,
//                     password: data.password,
//                     role: data.role,
//                 });

//                 const response = await axios.post(sendOtpApi, { email: data.email });
//                 setOtpSent(true);
//                 toast.success('OTP sent successully')
//                 setServerOtp(response.data.otp);
//                 reset({ otp: '' }); // Reset OTP field
//             } catch (error) {
//                 console.error('Error sending OTP:', error);
//                 toast.error('Failed to send OTP');
//                 setIsSendOtpDisabled(false); // Re-enable the Send OTP button if there is an error
//             } finally {
//             }
//         } else {
//             // Handle OTP verification without disabling the button

//             if (data.otp == serverOtp) {
//                 try {
//                     const response = await axios.post(signUpApi, { ...formData });
//                     console.log('User registered successfully:', response.data);
//                     localStorage.setItem("authToken", response.data.token);
//                     toast.success("User signed up successfully");
//                     setTimeout(() => {
//                         navigate("/");
//                         window.location.reload();
//                     }, 800);
//                 } catch (error) {
//                     console.error('Error submitting form:', error);
//                     toast.error('Failed to sign up');
//                 }
//             } else {
//                 console.error('Invalid OTP');
//                 toast.error('Invalid OTP');
//             }
//         }
//     };

//     return (
//         <div className="flex justify-center items-center min-h-screen bg-gradient-to-r from-purple-500 via-pink-500 to-red-500">
//             <ToastContainer />
//             <div className="bg-white text-gray-800 p-10 rounded-lg shadow-lg w-full max-w-sm">
//                 <h2 className="text-3xl font-semibold text-center mb-6">{otpSent ? 'Enter OTP' : 'Sign Up'}</h2>

//                 <form onSubmit={handleSubmit(onSubmit)}>
//                     {!otpSent && (
//                         <>
//                             <div className="mb-4">
//                                 <label className="block text-sm font-medium mb-2" htmlFor="name">Name</label>
//                                 <input
//                                     id="name"
//                                     {...register('name', { required: 'Name is required' })}
//                                     className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500"
//                                     type="text"
//                                     placeholder="Enter your name"
//                                 />
//                                 {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name.message}</p>}
//                             </div>

//                             <div className="mb-4">
//                                 <label className="block text-sm font-medium mb-2" htmlFor="email">Email</label>
//                                 <input
//                                     id="email"
//                                     {...register('email', {
//                                         required: 'Email is required',
//                                         pattern: {
//                                             value: /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/i,
//                                             message: 'Enter a valid email address',
//                                         },
//                                     })}
//                                     className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500"
//                                     type="email"
//                                     autoComplete="email"
//                                     placeholder="Enter your email"
//                                 />
//                                 {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>}
//                             </div>

//                             <div className="mb-4">
//                                 <label className="block text-sm font-medium mb-2" htmlFor="password">Password</label>
//                                 <input
//                                     id="password"
//                                     {...register('password', { required: 'Password is required' })}
//                                     className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500"
//                                     type="password"
//                                     autoComplete="current-password"
//                                     placeholder="Enter your password"
//                                 />
//                                 {errors.password && <p className="text-red-500 text-sm mt-1">{errors.password.message}</p>}
//                             </div>

//                             <div className="mb-6">
//                                 <label className="block text-sm font-medium mb-2" htmlFor="role">Role</label>
//                                 <select
//                                     id="role"
//                                     {...register('role', { required: 'Role is required' })}
//                                     className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500"
//                                 >
//                                     <option value="student">Student</option>
//                                     <option value="instructor">Instructor</option>
//                                 </select>
//                                 {errors.role && <p className="text-red-500 text-sm mt-1">{errors.role.message}</p>}
//                             </div>
//                         </>
//                     )}

//                     {otpSent && (
//                         <div className="mb-6">
//                             <label className="block text-sm font-medium mb-2" htmlFor="otp">OTP</label>
//                             <input
//                                 id="otp"
//                                 {...register('otp', { required: 'OTP is required' })}
//                                 className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500"
//                                 type="text"
//                                 placeholder="Enter the OTP sent to your email"
//                             />
//                             {errors.otp && <p className="text-red-500 text-sm mt-1">{errors.otp.message}</p>}
//                         </div>
//                     )}

//                     <button
//                         type="submit"
//                         className={`w-full bg-purple-600 text-white py-2 rounded-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-all duration-200 ${!otpSent ? '' : 'disabled:bg-purple-600'
//                             }`}
//                         disabled={!otpSent && isSendOtpDisabled} // Only disable the button when sending OTP
//                     >
//                         {otpSent ? 'Submit OTP' : 'Send OTP'}
//                     </button>
//                 </form>
//                 <div className='flex mt-3'>
//                     <p>Already have an account?</p> <Link to={'/login'} className='ml-2 text-blue-600 underline'>Login</Link>
//                 </div>
//             </div>
//         </div>
//     );
// };

// export default SignUp;