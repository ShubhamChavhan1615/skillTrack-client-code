// import React, { useState } from 'react';
// import { Link } from 'react-router-dom';
// import { loadStripe } from '@stripe/stripe-js';
// import { Elements, useStripe, useElements, CardElement } from '@stripe/react-stripe-js';
// import axios from 'axios';

// const stripePromise = loadStripe('pk_test_51PxoUl2Katb405IjRgSHqoW7fATTF3ud6jXZ7B2nk1r8lvINvwHjDnKEtHl8ugrSu4G0dOK4dRxg1G2pILdvktPU00RfSlc4sU'); // Replace with your Stripe publishable key

// interface Course {
//     _id: string;
//     title: string;
//     description: string;
//     thumbnail?: string;
//     instructor: {
//         _id: string;
//         name: string;
//     };
//     rating: number[];
//     price: string;
//     category: string;
// }

// interface PopularCoursesProps {
//     courses: Course[];
// }

// const PopularCourses: React.FC<PopularCoursesProps> = ({ courses }) => {
//     const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);

//     const openPaymentModal = (course: Course) => {
//         setSelectedCourse(course);
//     };

//     const closePaymentModal = () => {
//         setSelectedCourse(null);
//     };

//     return (
//         <Elements stripe={stripePromise}>
//             <div className="grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
//                 {courses.map((course) => (
//                     <div
//                         key={course._id}
//                         className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden transform transition-all duration-300 hover:scale-105 hover:shadow-2xl"
//                     >
//                         <Link to={`/description/course/${course._id}`}>
//                             <img
//                                 src={course.thumbnail}
//                                 alt={course.title}
//                                 className="w-full h-48 object-cover hover:opacity-90 transition duration-200"
//                             />
//                         </Link>
//                         <div className="p-6">
//                             <h3 className="text-lg font-semibold text-gray-800 dark:text-white mb-2">
//                                 {course.title}
//                             </h3>
//                             <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
//                                 Instructor: {course.instructor.name}
//                             </p>
//                             <div className="flex justify-between items-center">
//                                 <span className="text-lg font-semibold text-green-600 dark:text-green-400">
//                                     {course.price === '0' ? 'Free' : `₹${course.price}`}
//                                 </span>
//                             </div>
//                             <div className="mt-4 flex items-center justify-between">
//                                 {course.price === '0' ? (
//                                     <Link to={`/course/${course._id}/enroll`} className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition">
//                                         Enroll Now
//                                     </Link>
//                                 ) : (
//                                     <button
//                                         onClick={() => openPaymentModal(course)}
//                                         className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition"
//                                     >
//                                         Buy Now
//                                     </button>
//                                 )}
//                             </div>
//                         </div>
//                     </div>
//                 ))}
//             </div>

//             {selectedCourse && (
//                 <PaymentModal course={selectedCourse} onClose={closePaymentModal} />
//             )}
//         </Elements>
//     );
// };

// interface PaymentModalProps {
//     course: Course;
//     onClose: () => void;
// }

// const PaymentModal: React.FC<PaymentModalProps> = ({ course, onClose }) => {
//     const stripe = useStripe();
//     const elements = useElements();
//     const [loading, setLoading] = useState(false);

//     const handlePayment = async (event: React.FormEvent) => {
//         event.preventDefault();
//         if (!stripe || !elements) return;

//         setLoading(true);

//         try {
//             // Make the API call to create a payment intent and get the client secret
//             const { data } = await axios.post('http://localhost:4000/payment/api/create-payment-intent', {
//                 amount: Number(course.price) * 100, // Convert amount to number before multiplying
//                 courseId: course._id,
//             });

//             const clientSecret = data.clientSecret;

//             // Confirm the card payment using the client_secret directly
//             const result = await stripe.confirmCardPayment(clientSecret, {
//                 payment_method: {
//                     card: elements.getElement(CardElement)!,
//                 },
//             });

//             if (result.error) {
//                 console.error(result.error.message);
//             } else if (result.paymentIntent?.status === 'succeeded') {
//                 console.log('Payment succeeded!');
//             }
//         } catch (error) {
//             console.error('Payment error:', error);
//         } finally {
//             setLoading(false);
//             onClose();
//         }
//     };

//     return (
//         <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center">
//             <div className="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg">
//                 <h2 className="text-lg font-bold mb-4">{course.title}</h2>
//                 <p className="mb-4">Price: ₹{course.price}</p>

//                 <form onSubmit={handlePayment}>
//                     <CardElement className="mb-4 p-2 border border-gray-300 rounded-lg" />
//                     <button
//                         className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition w-full"
//                         type="submit"
//                         disabled={!stripe || loading}
//                     >
//                         {loading ? 'Processing...' : 'Pay Now'}
//                     </button>
//                 </form>

//                 <button
//                     className="mt-4 bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition"
//                     onClick={onClose}
//                 >
//                     Cancel
//                 </button>
//             </div>
//         </div>
//     );
// };

// export default PopularCourses;
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { loadStripe } from '@stripe/stripe-js';
import { Elements, useStripe, useElements, CardElement } from '@stripe/react-stripe-js';
import axios from 'axios';

const stripePromise = loadStripe('pk_test_51PxoUl2Katb405IjRgSHqoW7fATTF3ud6jXZ7B2nk1r8lvINvwHjDnKEtHl8ugrSu4G0dOK4dRxg1G2pILdvktPU00RfSlc4sU'); // Replace with your Stripe publishable key

interface Course {
    _id: string;
    title: string;
    description: string;
    thumbnail?: string;
    instructor: {
        _id: string;
        name: string;
    };
    rating: number[];
    price: string;
    category: string;
}

interface PopularCoursesProps {
    courses: Course[];
}

const PopularCourses: React.FC<PopularCoursesProps> = ({ courses }) => {
    const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);

    const openPaymentModal = (course: Course) => {
        setSelectedCourse(course);
    };

    const closePaymentModal = () => {
        setSelectedCourse(null);
    };

    return (
        <Elements stripe={stripePromise}>
            <div className="grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                {courses.map((course) => (
                    <div
                        key={course._id}
                        className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden transform transition-all duration-300 hover:scale-105 hover:shadow-2xl"
                    >
                        <Link to={`/description/course/${course._id}`}>
                            <img
                                src={course.thumbnail}
                                alt={course.title}
                                className="w-full h-48 object-cover hover:opacity-90 transition duration-200"
                            />
                        </Link>
                        <div className="p-6">
                            <h3 className="text-lg font-semibold text-gray-800 dark:text-white mb-2">
                                {course.title}
                            </h3>
                            <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                                Instructor: {course.instructor.name}
                            </p>
                            <div className="flex justify-between items-center">
                                <span className="text-lg font-semibold text-green-600 dark:text-green-400">
                                    {course.price === '0' ? 'Free' : `₹${course.price}`}
                                </span>
                            </div>
                            <div className="mt-4 flex items-center justify-between">
                                {course.price === '0' ? (
                                    <Link to={`/course/${course._id}/enroll`} className="bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600 transition-all duration-300">
                                        Enroll Now
                                    </Link>
                                ) : (
                                    <button
                                        onClick={() => openPaymentModal(course)}
                                        className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-all duration-300"
                                    >
                                        Buy Now
                                    </button>
                                )}
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            {selectedCourse && (
                <PaymentModal course={selectedCourse} onClose={closePaymentModal} />
            )}
        </Elements>
    );
};

interface PaymentModalProps {
    course: Course;
    onClose: () => void;
}

const PaymentModal: React.FC<PaymentModalProps> = ({ course, onClose }) => {
    const navigate = useNavigate();
    const stripe = useStripe();
    const elements = useElements();
    const [loading, setLoading] = useState(false);

    const handlePayment = async (event: React.FormEvent) => {
        event.preventDefault();
        if (!stripe || !elements) return;

        setLoading(true);

        try {
            const authToken = localStorage.getItem("authToken");
            if (!authToken) {
                return navigate("/login")
            }
            const { data } = await axios.post('http://localhost:4000/payment/api/create-payment-intent', {
                amount: Number(course.price) * 100,
                courseId: course._id,
            }, {
                headers: {
                    Authorization: `bearer ${authToken}`
                }
            });

            const clientSecret = data.clientSecret;

            const result = await stripe.confirmCardPayment(clientSecret, {
                payment_method: {
                    card: elements.getElement(CardElement)!,
                },
            });

            if (result.error) {
                console.error(result.error.message);
            } else if (result.paymentIntent?.status === 'succeeded') {
                console.log('Payment succeeded!');
            }
        } catch (error) {
            console.error('Payment error:', error);
        } finally {
            setLoading(false);
            onClose();
        }
    };

    return (
        <div className="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white dark:bg-gray-900 p-6 rounded-lg shadow-lg w-full max-w-md">
                <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-white text-center">{course.title}</h2>
                <p className="text-gray-700 dark:text-gray-300 mb-6 text-center">Price: ₹{course.price}</p>

                <form onSubmit={handlePayment} className="space-y-6">
                    <div className="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg border border-gray-300 dark:border-gray-600 transition-all duration-300 focus-within:ring-2 focus-within:ring-blue-400">
                        <CardElement
                            className="p-2"
                            options={{
                                style: {
                                    base: {
                                        fontSize: '16px',
                                        color: '#424770',
                                        '::placeholder': {
                                            color: '#aab7c4',
                                        },
                                    },
                                    invalid: {
                                        color: '#9e2146',
                                    },
                                },
                            }}
                        />
                    </div>

                    <button
                        className={`w-full bg-blue-500 hover:bg-blue-600 text-white py-3 rounded-lg transition-all duration-300 ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
                        type="submit"
                        disabled={!stripe || loading}
                    >
                        {loading ? 'Processing...' : 'Pay Now'}
                    </button>
                </form>

                <button
                    className="mt-4 w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-lg transition-all duration-300"
                    onClick={onClose}
                >
                    Cancel
                </button>
            </div>
        </div>
    );
};

export default PopularCourses;
// import React, { useState } from 'react';
// import { Link, useNavigate } from 'react-router-dom';
// import { loadStripe } from '@stripe/stripe-js';
// import { Elements, useStripe, useElements, CardElement } from '@stripe/react-stripe-js';
// import axios from 'axios';

// const stripePromise = loadStripe('pk_test_51PxoUl2Katb405IjRgSHqoW7fATTF3ud6jXZ7B2nk1r8lvINvwHjDnKEtHl8ugrSu4G0dOK4dRxg1G2pILdvktPU00RfSlc4sU'); // Replace with your Stripe publishable key

// interface Course {
//     _id: string;
//     title: string;
//     description: string;
//     thumbnail?: string;
//     instructor: {
//         _id: string;
//         name: string;
//     };
//     rating: number[];
//     price: string;
//     category: string;
// }

// interface PopularCoursesProps {
//     courses: Course[];
// }

// const PopularCourses: React.FC<PopularCoursesProps> = ({ courses }) => {
//     const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);

//     const openPaymentModal = (course: Course) => {
//         setSelectedCourse(course);
//     };

//     const closePaymentModal = () => {
//         setSelectedCourse(null);
//     };

//     return (
//         <Elements stripe={stripePromise}>
//             <div className="grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
//                 {courses.map((course) => (
//                     <div
//                         key={course._id}
//                         className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden transform transition-all duration-300 hover:scale-105 hover:shadow-2xl"
//                     >
//                         <Link to={`/description/course/${course._id}`}>
//                             <img
//                                 src={course.thumbnail}
//                                 alt={course.title}
//                                 className="w-full h-48 object-cover hover:opacity-90 transition duration-200"
//                             />
//                         </Link>
//                         <div className="p-6">
//                             <h3 className="text-lg font-semibold text-gray-800 dark:text-white mb-2">
//                                 {course.title}
//                             </h3>
//                             <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
//                                 Instructor: {course.instructor.name}
//                             </p>
//                             <div className="flex justify-between items-center">
//                                 <span className="text-lg font-semibold text-green-600 dark:text-green-400">
//                                     {course.price === '0' ? 'Free' : `₹${course.price}`}
//                                 </span>
//                             </div>
//                             <div className="mt-4 flex items-center justify-between">
//                                 {course.price === '0' ? (
//                                     <Link to={`/course/${course._id}/enroll`} className="bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-600 transition-all duration-300">
//                                         Enroll Now
//                                     </Link>
//                                 ) : (
//                                     <button
//                                         onClick={() => openPaymentModal(course)}
//                                         className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-all duration-300"
//                                     >
//                                         Buy Now
//                                     </button>
//                                 )}
//                             </div>
//                         </div>
//                     </div>
//                 ))}
//             </div>

//             {selectedCourse && (
//                 <PaymentModal course={selectedCourse} onClose={closePaymentModal} />
//             )}
//         </Elements>
//     );
// };

// interface PaymentModalProps {
//     course: Course;
//     onClose: () => void;
// }

// const PaymentModal: React.FC<PaymentModalProps> = ({ course, onClose }) => {
//     const navigate = useNavigate();
//     const stripe = useStripe();
//     const elements = useElements();
//     const [loading, setLoading] = useState(false);

//     const handlePayment = async (event: React.FormEvent) => {
//         event.preventDefault();
//         if (!stripe || !elements) return;

//         setLoading(true);

//         try {
//             const authToken = localStorage.getItem("authToken");
//             if (!authToken) {
//                 return navigate("/login")
//             }
//             const { data } = await axios.post('http://localhost:4000/payment/api/create-payment-intent', {
//                 amount: Number(course.price) * 100,
//                 courseId: course._id,
//             }, {
//                 headers: {
//                     Authorization: `bearer ${authToken}`
//                 }
//             });

//             const clientSecret = data.clientSecret;

//             const result = await stripe.confirmCardPayment(clientSecret, {
//                 payment_method: {
//                     card: elements.getElement(CardElement)!,
//                 },
//             });

//             if (result.error) {
//                 console.error(result.error.message);
//             } else if (result.paymentIntent?.status === 'succeeded') {
//                 console.log('Payment succeeded!');
//             }
//         } catch (error) {
//             console.error('Payment error:', error);
//         } finally {
//             setLoading(false);
//             onClose();
//         }
//     };

//     return (
//         <div className="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50">
//             <div className="bg-white dark:bg-gray-900 p-6 rounded-lg shadow-lg w-full max-w-md">
//                 <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-white text-center">{course.title}</h2>
//                 <p className="text-gray-700 dark:text-gray-300 mb-6 text-center">Price: ₹{course.price}</p>

//                 <form onSubmit={handlePayment} className="space-y-6">
//                     <div className="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg border border-gray-300 dark:border-gray-600 transition-all duration-300 focus-within:ring-2 focus-within:ring-blue-400">
//                         <CardElement
//                             className="p-2"
//                             options={{
//                                 style: {
//                                     base: {
//                                         fontSize: '16px',
//                                         color: '#424770',
//                                         '::placeholder': {
//                                             color: '#aab7c4',
//                                         },
//                                     },
//                                     invalid: {
//                                         color: '#9e2146',
//                                     },
//                                 },
//                             }}
//                         />
//                     </div>

//                     <button
//                         className={`w-full bg-blue-500 hover:bg-blue-600 text-white py-3 rounded-lg transition-all duration-300 ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
//                         type="submit"
//                         disabled={!stripe || loading}
//                     >
//                         {loading ? 'Processing...' : 'Pay Now'}
//                     </button>
//                 </form>

//                 <button
//                     className="mt-4 w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-lg transition-all duration-300"
//                     onClick={onClose}
//                 >
//                     Cancel
//                 </button>
//             </div>
//         </div>
//     );
// };

// export default PopularCourses;